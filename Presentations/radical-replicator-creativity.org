* Radical Replicator Creativity

I'm going to start with a story.  You can take any part of it
literally or metaphorically.  Feel free to take the parts you like
literally and feel free to use your imagination to create your
own version of the story!

** The =Arty= Project

To start with, let's imagine that you begin a project with some
friends to create a maximally creative immersive digital environment.
When I say *you* do something in this story, you can imagine doing any
of those things yourself or with your friends - whatever feels like
the most fun for each part!

You're creating a digital environment suitable for
- playing multi-player games
- designing things
- exploring the art with friends
- and anything else that seems fun to do there

Let's call this world Art-Tease-Ya - or =Arty= for short!

You want the design of everything in =Arty= to be malleable and
extensible.  You design everything to be procedurally generated -
maybe by Lisp Functions.  Everything can be directly manipulated or
live coded or generated by Machine Learning or designed carefully and
thoughtfully as seems right in the moment.  You can easily explore
divergent versions of =Arty=, carrying out disruptive experiments,
undoing, redoing with changes, combining things.  You can put
different versions of your world in different =Arty= spaces.

You discover that while you can use a lot of Machine Learning to
generate some great texture, the most creative elements seem to always
require humans in the loop.  Lots of creative humans find themselves
spending time in =Arty=, *hacking!* =Arty= is a world of infinite
creativity!

** =Arty= Comes Out To Play

You really like some of the artifacts in =Arty= - some are purely your
creations, others are things you found and modified.  You translate
some of their designs into CAD CAM formats and feed them to your 3D
Printers in the real world.  Elements of =Arty= are now in your physical
world!

Although human creativity continues to rule supreme, the AI Creative
Assistants in =Arty= keep giving you more leverage.  You give some of
them access to robots in your physical workshop.  You can now carry
out more ambitious projects!  You decide to build a new and better
workshop.  With a gallery, performance space and, oh yes, really cool
living spaces.  Mars times 100, so maybe call it =Jupiter=!

As you design =Jupiter=, you realize that you want it to have as much
of the dynamism of =Arty= as possible.  You make everything modular
with integrated robotics.  =Jupiter= is going to be like a Lego World
where all the different components can re-assemble themselves in
different ways or be easily replaced by different components!

** =Jupiter= Becomes Real!

You begin printing the =Jupiter= components and stacking them on a
flatbed trailer.  Or maybe your robots do that.  And maybe you printed
the flatbed trailer first and it's actually made of =Jupiter=
components which can become something different when you arrive at
your building location.

Maybe your building location is the Mars property by the Salton Sea.
How might the building process go?

- Unloading your worker robots
- Assembling
  - racks of solar modules
  - a temporary living area
  - the first version of your workshop space
- =Jupiter= can unfold iteratively

Some of your robots might start reshaping the earth
- Parts of =Jupiter= might be below ground
  - Earth Sheltered around open atria

Parts of the gross =Jupiter= structure might be made from
- Salton Sea Mud
- Adobe Bricks
(The author of this Presentation lives in a house built from Adobe
Bricks which were made in the nearby Kit Carson Park from the clay
which is natural there.)

While the =Jupiter= components were being printed and transported, new
ideas for =Jupiter= were being tried out in =Arty=.  Some of these
ideas will be realized in the first assembly of =Jupiter=, others
later, and most will stay only in =Arty= along with lots of other
beautiful designs that will never emerge into the physical world.

** We Need Computing Magic!

Creating dynamic environments like =Arty= and big projects like
=Jupiter= would traditionally require massive resources.  The kinds of
resources you see listed in the credits of major motion pictures with
fancy special effects.  Yet you may also have seen some of the recent
games and movies created by one or a few creative people using open
source tools like Blender.

#+BEGIN_QUOTE
An sufficiently advanced technology is indistinguiable from magic.\\
- Arthur C. CLarke
#+END_QUOTE

Some of the most complex and sophisticated systems ever created by
human beings were created by a small number of people leveraging
powerful computing.  Yet most people who try computer programming
quickly bog down by the complexity of it all.  How do the really
successful people do it?  They use *much simpler tools!*

In the world of software, the number one enemy is complexity.  In
computing, as in math, *Power with Simplicity is called Elegance*.
Computing Magic is all about harnessing Elegance.  And for Computing
Art, that Elegance needs to be highly dynamic.

Computer Languages with hundreds of features are deadly.  The greatest
languages can be fully described on one side of a postcard, in a large
legible font.  The simplest and most general of such languages is
probablly Schema, a dialect of Lisp.  Two others are Smalltalk (famous
for creating multi-media environments) and Prolog (famous for AI
Problems Solving and Knowledge-Based Systems).  Interestingly, all
three languages are highly dynamic, supporting a maximum of fast
creative exploration.

The huge numbers of features in conventional langauges are designed to
allow you to do easily do things someone else thought of first.  They
are a substitute for creativity.  Unfortunately, operating that way
tends to dull creativity.  While Computing Magic is best supported by
Elegant Tools, it is primarily about learning a style of programming
based on creative invention.

Edsger Dijkstra's method:
1. Think about what you want to build
2. Imagine the tools that would make building it easy
3. Explore building your system using your imaginary tools
4. Iterate and recurse until your plans are clear
5. Build your custom tools and use them to build your dream!
